#BlueJ class context
comment0.target=Tour
comment1.params=graph\ start\ timeLimit
comment1.target=Tour(DirectedGraph,\ Node,\ int)
comment10.params=
comment10.target=Path\ path()
comment11.params=
comment11.target=Node\ getCurrNode()
comment12.params=
comment12.target=int\ getCurrTime()
comment13.params=
comment13.target=int\ getVisitTime()
comment14.params=
comment14.target=java.lang.String\ visitedSitesToString()
comment2.params=
comment2.target=void\ travel()
comment2.text=generate\ tour\ itinerary
comment3.params=k
comment3.target=void\ addDesiredSite(java.lang.Comparable)
comment3.text=add\ desired\ sites\ to\ tour
comment4.params=
comment4.target=void\ visitDesiredSite()
comment4.text=visit\ desired\ sites
comment5.params=
comment5.target=void\ visitOtherSite()
comment5.text=\ visit\ other\ sites\ -\ repeat\ the\ same\ procedure\ as\ we\ do\ with\ desired\ sites.\ However,\ here,\ we\ mark\ the\ desired\ sites\ as\ visited\ so\ we\ do\ not\n\ \ \ \ \ \ \ consider\ revisiting\ them\ \n
comment6.params=
comment6.target=void\ goBack()
comment6.text=find\ the\ shortest\ path\ to\ go\ home\ and\ add\ it\ to\ the\ path\ of\ the\ tour
comment7.params=l
comment7.target=java.util.HashMap\ createHashMap(java.util.ArrayList)
comment7.text=create\ boolean\ hashmap\ that\ is\ used\ locally\ in\ methods\ to\ visit\ sites
comment8.params=n
comment8.target=boolean\ returnable(Node)
comment8.text=\ before\ traveling\ to\ a\ site\ X,\ we\ need\ to\ check\ if\ we\ have\ time\ to\ return\ home\ after\ visiting\ it.\ \n\ \ \ \ \ \ \ The\ condition\ is\:\ \ currentTime\ +\ timeToX\ +\ timeAtX\ +\ timeGoHome\n\ \ \ \ \ \ \ If\ X\ is\ not\ a\ site\ but\ just\ a\ regular\ node,\ we\ do\ not\ have\ to\ account\ for\ time\ spent\ at\ X\n
comment9.params=
comment9.target=java.util.ArrayList\ getDesiredSites()
numComments=15
