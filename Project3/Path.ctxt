#BlueJ class context
comment0.target=Path
comment1.params=start\ destination\ graph
comment1.target=Path(Node,\ Node,\ DirectedGraph)
comment10.params=b
comment10.target=void\ setDone(boolean)
comment11.params=
comment11.target=int\ size()
comment12.params=
comment12.target=Node\ getLastNode()
comment13.params=i
comment13.target=Node\ getNode(int)
comment14.params=
comment14.target=DirectedGraph\ getGraph()
comment15.params=
comment15.target=Node\ getDestination()
comment16.params=
comment16.target=java.lang.String\ toString()
comment2.params=prev
comment2.target=void\ updateRoute(Path)
comment2.text=\ \n\ Update\ route\ when\ a\ shorter\ path\ is\ found\ \n\ For\ example,\ let\ p(A,D)\ be\ the\ shortest\ path\ from\ A\ to\ D.\ Suppose\ there\ is\ a\ point\ C\ s.t\ p(A,C)\ +\ w(A,D)\ <\ p(A,D).\ We\ want\ to\ update\ \n\ p(A,D)\ to\ be\ p(A,C)\ and\ then\ from\ C\ go\ straight\ to\ D\n
comment3.params=prev
comment3.target=void\ updateLength(Path)
comment3.text=\ \n\ Update\ length,\ using\ the\ length\ of\ the\ path\ that\ leads\ to\ the\ node\ prior\ to\ our\ destination\n
comment4.params=prev
comment4.target=void\ updatePath(Path)
comment4.text=Update\ path
comment5.params=p
comment5.target=void\ combinePath(Path)
comment5.text=Combine\ the\ routes\ of\ 2\ paths
comment6.params=a
comment6.target=void\ setLength(int)
comment7.params=
comment7.target=int\ length()
comment8.params=
comment8.target=java.util.ArrayList\ getRoute()
comment9.params=
comment9.target=boolean\ isDone()
numComments=17
