#BlueJ class context
comment0.target=DirectedGraph
comment1.params=
comment1.target=DirectedGraph()
comment10.params=k
comment10.target=Node\ find(java.lang.Comparable)
comment11.params=
comment11.target=int\ size()
comment12.params=
comment12.target=java.util.ArrayList\ getNodes()
comment13.params=
comment13.target=java.util.ArrayList\ getHotels()
comment14.params=
comment14.target=java.util.ArrayList\ getSites()
comment2.params=k\ type\ suggestTime
comment2.target=boolean\ addNode(java.lang.Comparable,\ java.lang.String,\ int)
comment2.text=add\ a\ node
comment3.params=k1\ k2\ w
comment3.target=boolean\ addEdge(java.lang.Comparable,\ java.lang.Comparable,\ int)
comment3.text=add\ an\ edge\ connecting\ 2\ values\ and\ carrying\ a\ weight
comment4.params=k
comment4.target=java.util.ArrayList\ getNeighbors(java.lang.Comparable)
comment4.text=get\ neighbors\ of\ a\ node\ given\ its\ value
comment5.params=allpaths
comment5.target=Node\ minNode(java.util.HashMap)
comment5.text=find\ the\ nearest\ unvisited\ node
comment6.params=k1\ k2
comment6.target=Path\ shortestPath(java.lang.Comparable,\ java.lang.Comparable)
comment6.text=find\ shortest\ path\ between\ any\ 2\ points\ \ -\ dijkstra\ algorithm
comment7.params=start\ visit
comment7.target=Path\ travelToNearestSite(Node,\ java.util.HashMap)
comment7.text=find\ the\ path\ to\ the\ nearest\ site\ from\ a\ given\ node
comment8.params=start\ end
comment8.target=int\ weight(Node,\ Node)
comment8.text=get\ the\ weight\ of\ the\ edge\ connecting\ 2\ nodes
comment9.params=k
comment9.target=boolean\ contains(java.lang.Comparable)
numComments=15
